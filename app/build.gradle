apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.github.wurensen.android-aspectjx'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        applicationId rootProject.app_appid.app
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        testInstrumentationRunner rootProject.testInstrumentationRunner

        multiDexEnabled true

        externalNativeBuild{
            cmake{
                cppFlags ""
                //兼容CPU构架
                abiFilters 'armeabi-v7a', "arm64-v8a"
            }
        }

        // 在gradle文件中配置选项参数值（用于APT传参接收）
        // 同学们注意：切记：必须写在defaultConfig节点下
        javaCompileOptions {
            annotationProcessorOptions {
                // project.getName() == app
                arguments = [moduleName: project.getName(), packageNameForAPT: rootProject.packageNameForAPT]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    dataBinding{
        enabled true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    lintOptions { checkReleaseBuilds false }
}

// ajx配置，与annotation processor矛盾
aspectjx {
    enabled = true
    // 移除kotlin相关，编译错误和提升速度
    exclude 'kotlin.jvm', 'kotlin.internal'
    exclude 'kotlinx.coroutines.internal', 'kotlinx.coroutines.android'
    include 'com.bard.gplearning.MainActivity'
    include 'com.bard.gplearning.permissions'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraintlayout"
    implementation "com.google.android.material:material:$rootProject.material"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerview"
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$rootProject.lifecycle_viewmodel"

    implementation "com.google.auto.service:auto-service:$rootProject.auto_service"
    annotationProcessor "com.google.auto.service:auto-service:$rootProject.auto_service"

    implementation 'com.rmtheis:tess-two:7.0.0'

    // 公共基础库
    api project(":common")
    implementation project(':NetStateLibrary')
    implementation project(':EventBusLibrary')
    implementation project(':GlideLibrary')
    implementation project(':HttpRequestLibrary')
    implementation project(':PluginLibrary')
    implementation project(':WebViewlibrary')
    implementation project(':kotlinlibrary')
    implementation project(":usercenter")

    //  arouter 专用 注解模块
    implementation project(":arouter_annotation")
    // 使用注解处理器
    // arouter 专用 注解处理器
    annotationProcessor project(':arouter_compiler')

    if(rootProject.component_is_library){
        implementation project(':Component')
    }


    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.3'


    implementation 'org.aspectj:aspectjrt:1.9.6'
}
